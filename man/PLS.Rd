% Generated by roxygen2: do not edit by hand
% Please edit documentation in R/PLS.R
\name{PLS}
\alias{PLS}
\title{PLS}
\usage{
PLS(
  measurement,
  structure,
  data,
  as_reflective = NULL,
  imputation_function = fail_on_NA,
  sample_weights = NULL,
  path_estimation = "regression",
  max_iterations = 1000,
  convergence = 1e-05
)
}
\arguments{
\item{measurement}{alist with formulas defining the measurements}

\item{structure}{alist with formulas defining structural model}

\item{data}{data set (data.frame)}

\item{as_reflective}{vector with names of composites that should be treated
as reflective. Internally, basicPLS will use mode A estimation for these
composites, and mode B estimation for all other composites.}

\item{imputation_function}{a function that imputes missing data. The function
will be given the raw data set and the weights.}

\item{sample_weights}{data weights for weighted PLS-SEM}

\item{path_estimation}{how should the inner paths be estimated? Available
are "centroid" and "regression" based estimation.}

\item{max_iterations}{maximal number of iterations for the estimation
algorithm}

\item{convergence}{convergence criterion. If the maximal change in the
weights falls below this value, the estimation is stopped.}
}
\value{
list with weights, effects, and composites
}
\description{
Basic function estimating a PLS-SEM with formative measurement model.
The algorithm is adapted from https://github.com/gastonstat/plspm.
}
\examples{
library(basicPLS)
data_set <- basicPLS::satisfaction

# Both, measurement and structural model are specified using R's formulas:
PLS_result <- PLS(
  measurement = alist(EXPE ~ expe1 + expe2 + expe3 + expe4 + expe5,
                      IMAG ~ imag1 + imag2 + imag3 + imag4 + imag5,
                      LOY ~ loy1 + loy2 + loy3 + loy4,
                      QUAL ~ qual1 + qual2 + qual3 + qual4 + qual5,
                      SAT ~ sat1 + sat2 + sat3 + sat4,
                      VAL ~ val1 + val2 + val3 + val4),
  structure = alist(QUAL ~ EXPE,
                    EXPE ~ IMAG,
                    SAT ~ IMAG + EXPE + QUAL + VAL,
                    LOY ~ IMAG + SAT,
                    VAL ~ EXPE + QUAL),
  data = data_set)
PLS_result

# R squared:
get_r2(PLS_result)

# Use confidence_intervals to bootstrap confidence intervals for all parameters:
ci <- confidence_intervals(PLS_result,
                           # Increase for actual use:
                           R = 10)
}
